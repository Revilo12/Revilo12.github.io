---
layout: post
title:      "Staying Proficient in Multiple Languages"
date:       2020-08-19 16:27:14 +0000
permalink:  staying_proficient_in_multiple_languages
---

I did most of my curriculum in a little under four months. Being too much of a perfectionist, I decided I wanted to make my final project as excellent as I could make it and delayed starting for some time because of this. I delayed so far as to have my next semester of college start. This left me building my final project during mid-semester break two months after I finished most of the curriculum. Having not used Javascript in that time, using c++, python, and Matlab for my college curriculum, I was left having forgotten much of the syntax. This made my project much harder to build and affected my performance in portfolio reviews. 
Because of this, I have been considering how best to stay proficient in multiple programming languages. I have a couple of ideas about it.
First, many sources that I read online when I looked it up, said something as flat at "just use them". I think that this is true for broader programming concepts, object-oriented programming, for example, but will not keep one proficient in a specific language or set of languages. For example, all the work I had done during the first half of the semester did not help when I forgot how to log something to the console in my React portfolio review. I think that this problem can be improved by doing programming challenges. Overall, I believe that programming challenges are a little useless in the grand scheme of things. I have encountered many people who use them as a substitute for personal projects and then have trouble building their projects later and little to show for all their work. I think that rather than trying to do as many programming challenge problems in one language as a person can, they would benefit more by doing one challenge in all the languages they knew. There have been studies done that show that people learn better when looking at things that do and don't fall into a category rather than just looking at things that do. For example, it is easier to learn about impressionism if you are shown examples of paintings that are considered impressionist and then those that are not impressionist, rather than just impressionist paintings as we often are asked to learn things. I think that this can be a very beneficial aspect of the same problem on HackerRank or a similar service in multiple languages. You can compare the different implementations and syntaxes rather than having the syntax blend into the problem.
However, as I said earlier, this cannot be the final solution. It is essential not to waste too much time doing coding challenges that are mostly just relevant for job interviews. It is crucial to also work on projects to remember best practices on the macro level. One could have a large project that they work on every day or every few days or much smaller projects that could be done at different intervals. 
I found that a lot of the advice online suggested a cut and dry solution to this problem, but I don't think that's the case. There are many facets to programming, so you need to ensure that your answer to staying proficient acknowledges all of those areas. I think that a balance of doing the same problem in multiple languages and personal projects is the solution to this dilemma.
